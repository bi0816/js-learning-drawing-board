{"mappings":"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","sources":["<anon>","src/js/index.js"],"sourcesContent":["class DrawingBoard {\n    isMouseDown = false;\n    isNavigatorVisible = false;\n    undoArray = [];\n    CLASS_NAME = {\n        active: \"active\",\n        hide: \"hide\"\n    };\n    CURSOR_VALUE = {\n        default: \"default\",\n        active: \"crosshair\"\n    };\n    COLOR_VALUE = {\n        eraser: \"#fff\",\n        background: \"#fff\"\n    };\n    MODE = {\n        none: \"NONE\",\n        brush: \"BRUSH\",\n        eraser: \"ERASER\"\n    };\n    STATUS = \"NONE\";\n    container;\n    canvas;\n    toolbar;\n    brush;\n    brushPanel;\n    brushSize;\n    brushSizeLabel;\n    brushSizePreview;\n    colorPicker;\n    eraser;\n    navigator;\n    navigatorContainer;\n    navigatorIMG;\n    undo;\n    clear;\n    btnDownload;\n    constructor(){\n        this.assignElement();\n        this.initContext();\n        this.initCanvasBackground();\n        this.addEvent();\n    }\n    assignElement() {\n        this.container = document.querySelector(\"#container\");\n        this.canvas = this.container.querySelector(\"#canvas\");\n        this.toolbar = this.container.querySelector(\"#toolbar\");\n        this.brush = this.toolbar.querySelector(\"#brush\");\n        this.brushPanel = this.container.querySelector(\"#brushPanel\");\n        this.brushSize = this.brushPanel.querySelector(\"#brushSize\");\n        this.brushSizeLabel = this.brushPanel.querySelector(\".brushSizeLabel\");\n        this.brushSizePreview = this.brushPanel.querySelector(\"#brushSizePreview\");\n        this.colorPicker = this.toolbar.querySelector(\"#colorPicker\");\n        this.eraser = this.toolbar.querySelector(\"#eraser\");\n        this.navigator = this.toolbar.querySelector(\"#navigator\");\n        this.navigatorContainer = this.container.querySelector(\"#imgNav\");\n        this.navigatorIMG = this.navigatorContainer.querySelector(\"#canvasImg\");\n        this.undo = this.toolbar.querySelector(\"#undo\");\n        this.clear = this.toolbar.querySelector(\"#clear\");\n        this.btnDownload = this.toolbar.querySelector(\"#download\");\n    }\n    initContext() {\n        this.context = this.canvas.getContext(\"2d\");\n    }\n    initCanvasBackground() {\n        this.context.fillStyle = this.COLOR_VALUE.background;\n        this.context.fillRect(0, 0, this.canvas.width, this.canvas.height);\n    }\n    addEvent() {\n        this.brush.addEventListener(\"click\", this.onClickBrush.bind(this));\n        this.canvas.addEventListener(\"mousedown\", this.onMouseDown.bind(this));\n        this.canvas.addEventListener(\"mousemove\", this.onMouseMove.bind(this));\n        this.canvas.addEventListener(\"mouseup\", this.onMouseUp.bind(this));\n        this.canvas.addEventListener(\"mouseout\", this.onMouseOut.bind(this));\n        this.brushSize.addEventListener(\"input\", this.onChangeBrushSize.bind(this));\n        this.colorPicker.addEventListener(\"input\", this.onChangeColor.bind(this));\n        this.eraser.addEventListener(\"click\", this.onClickeraser.bind(this));\n        this.navigator.addEventListener(\"click\", this.onClickNavigator.bind(this));\n        this.undo.addEventListener(\"click\", this.onClickUndo.bind(this));\n        this.clear.addEventListener(\"click\", this.onClickClear.bind(this));\n        this.btnDownload.addEventListener(\"click\", this.onClickDownload.bind(this));\n    }\n    onClickDownload(e) {\n        this.btnDownload.href = this.canvas.toDataURL(\"image/jpg\", 1);\n        this.btnDownload.download = \"image.jpeg\";\n    }\n    onClickClear() {\n        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n        this.undoArray = [];\n        this.updateNavigator();\n        this.initCanvasBackground();\n    }\n    onClickUndo() {\n        if (this.undoArray.length === 0) {\n            alert(\"더이상 실행 취소 불가\");\n            return;\n        }\n        let prevDataUrl = this.undoArray.pop();\n        let prevImg = new Image();\n        prevImg.onload = ()=>{\n            this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n            this.context.drawImage(prevImg, 0, 0, this.canvas.width, this.canvas.height, 0, 0, this.canvas.width, this.canvas.height);\n        };\n        prevImg.src = prevDataUrl;\n        if (this.isNavigatorVisible) this.navigatorIMG.src = prevDataUrl;\n    }\n    saveState() {\n        if (this.undoArray.length > 9) {\n            this.undoArray.shift();\n            this.undoArray.push(this.canvas.toDataURL());\n        } else this.undoArray.push(this.canvas.toDataURL());\n    }\n    updateNavigator() {\n        if (!this.isNavigatorVisible) return;\n        this.navigatorIMG.src = this.canvas.toDataURL();\n    }\n    onChangeColor(e) {\n        this.brushSizePreview.style.background = e.target.value;\n    }\n    onChangeBrushSize(e) {\n        this.brushSizeLabel.innerHTML = `${e.target.value} Size`;\n        this.brushSizePreview.style.width = `${e.target.value}px`;\n        this.brushSizePreview.style.height = `${e.target.value}px`;\n    }\n    onMouseOut() {\n        if (this.STATUS === this.MODE.none) return;\n        this.isMouseDown = false;\n    }\n    onMouseUp() {\n        if (this.STATUS === this.MODE.none) return;\n        this.isMouseDown = false;\n        this.updateNavigator();\n    }\n    onMouseMove(e) {\n        if (!this.isMouseDown) return;\n        const currentPosition = this.getMousePosition(e);\n        this.context.lineTo(currentPosition.x, currentPosition.y);\n        this.context.stroke();\n        this.updateNavigator();\n    }\n    onMouseDown(e) {\n        if (this.STATUS === this.MODE.none) return;\n        this.isMouseDown = true;\n        const currentPosition = this.getMousePosition(e);\n        this.context.beginPath();\n        this.context.moveTo(currentPosition.x, currentPosition.y);\n        this.context.lineCap = \"round\";\n        if (this.STATUS === this.MODE.brush) {\n            this.context.strokeStyle = this.colorPicker.value;\n            this.context.lineWidth = this.brushSize.value;\n        } else if (this.STATUS === this.MODE.eraser) {\n            this.context.strokeStyle = this.COLOR_VALUE.eraser;\n            this.context.lineWidth = 50;\n        }\n        this.saveState();\n    }\n    getMousePosition(e) {\n        const boundaries = this.canvas.getBoundingClientRect();\n        return {\n            x: e.clientX - boundaries.left,\n            y: e.clientY - boundaries.top\n        };\n    }\n    onClickBrush(e) {\n        const isActive = e.currentTarget.classList.contains(this.CLASS_NAME.active);\n        this.STATUS = isActive ? this.MODE.none : this.MODE.brush;\n        this.canvas.style.cursor = isActive ? this.CURSOR_VALUE.default : this.CURSOR_VALUE.active;\n        e.currentTarget.classList.toggle(this.CLASS_NAME.active);\n        this.brushPanel.classList.toggle(this.CLASS_NAME.hide);\n        this.eraser.classList.remove(this.CLASS_NAME.active);\n    }\n    onClickeraser(e) {\n        const isActive = e.currentTarget.classList.contains(this.CLASS_NAME.active);\n        this.STATUS = isActive ? this.MODE.none : this.MODE.eraser;\n        this.canvas.style.cursor = isActive ? this.CURSOR_VALUE.default : this.CURSOR_VALUE.active;\n        e.currentTarget.classList.toggle(this.CLASS_NAME.active);\n        this.brush.classList.remove(this.CLASS_NAME.active);\n        this.brushPanel.classList.add(this.CLASS_NAME.hide);\n    }\n    onClickNavigator(e) {\n        this.isNavigatorVisible = !e.currentTarget.classList.contains(this.CLASS_NAME.active);\n        e.currentTarget.classList.toggle(this.CLASS_NAME.active);\n        this.navigatorContainer.classList.toggle(this.CLASS_NAME.hide);\n        this.updateNavigator();\n    }\n}\nnew DrawingBoard();\n\n//# sourceMappingURL=index.dbb62f11.js.map\n","class DrawingBoard {\r\n  isMouseDown = false; // T, F\r\n  isNavigatorVisible = false;\r\n  undoArray = [];\r\n  CLASS_NAME = {\r\n    active: 'active',\r\n    hide: 'hide'\r\n  }\r\n  CURSOR_VALUE = {\r\n    default: 'default',\r\n    active: 'crosshair'\r\n  }\r\n  COLOR_VALUE = {\r\n    eraser: '#fff',\r\n    background: '#fff',\r\n  }\r\n  MODE = {\r\n    none: \"NONE\",\r\n    brush: \"BRUSH\",\r\n    eraser: \"ERASER\"\r\n  }\r\n  STATUS = \"NONE\";\r\n\r\n  container;\r\n  canvas;\r\n  toolbar;\r\n  brush;\r\n  brushPanel;\r\n  brushSize;\r\n  brushSizeLabel;\r\n  brushSizePreview;\r\n  colorPicker;\r\n  eraser;\r\n  navigator;\r\n  navigatorContainer;\r\n  navigatorIMG;\r\n  undo;\r\n  clear;\r\n  btnDownload;\r\n\r\n  constructor() {\r\n    this.assignElement();\r\n    this.initContext();\r\n    this.initCanvasBackground();\r\n    this.addEvent();\r\n  }\r\n\r\n  assignElement() {\r\n    this.container = document.querySelector(\"#container\");\r\n    this.canvas = this.container.querySelector(\"#canvas\");\r\n    this.toolbar = this.container.querySelector(\"#toolbar\");\r\n    this.brush = this.toolbar.querySelector(\"#brush\");\r\n    this.brushPanel = this.container.querySelector(\"#brushPanel\");\r\n    this.brushSize = this.brushPanel.querySelector(\"#brushSize\");\r\n    this.brushSizeLabel = this.brushPanel.querySelector(\".brushSizeLabel\");\r\n    this.brushSizePreview = this.brushPanel.querySelector(\"#brushSizePreview\");\r\n    this.colorPicker = this.toolbar.querySelector(\"#colorPicker\");\r\n    this.eraser = this.toolbar.querySelector(\"#eraser\");\r\n    this.navigator = this.toolbar.querySelector(\"#navigator\");\r\n    this.navigatorContainer = this.container.querySelector(\"#imgNav\");\r\n    this.navigatorIMG = this.navigatorContainer.querySelector(\"#canvasImg\");\r\n    this.undo = this.toolbar.querySelector(\"#undo\");\r\n    this.clear = this.toolbar.querySelector(\"#clear\");\r\n    this.btnDownload = this.toolbar.querySelector(\"#download\");\r\n  }\r\n\r\n  initContext() {\r\n    this.context = this.canvas.getContext(\"2d\");\r\n  }\r\n\r\n  initCanvasBackground() {\r\n    this.context.fillStyle = this.COLOR_VALUE.background;\r\n    this.context.fillRect(0, 0, this.canvas.width, this.canvas.height);\r\n  }\r\n\r\n  addEvent() {\r\n    this.brush.addEventListener(\"click\", this.onClickBrush.bind(this));\r\n    this.canvas.addEventListener(\"mousedown\", this.onMouseDown.bind(this));\r\n    this.canvas.addEventListener(\"mousemove\", this.onMouseMove.bind(this));\r\n    this.canvas.addEventListener(\"mouseup\", this.onMouseUp.bind(this));\r\n    this.canvas.addEventListener(\"mouseout\", this.onMouseOut.bind(this));\r\n    this.brushSize.addEventListener(\"input\", this.onChangeBrushSize.bind(this));\r\n    this.colorPicker.addEventListener(\"input\", this.onChangeColor.bind(this));\r\n    this.eraser.addEventListener(\"click\", this.onClickeraser.bind(this));\r\n    this.navigator.addEventListener('click', this.onClickNavigator.bind(this));\r\n    this.undo.addEventListener('click', this.onClickUndo.bind(this));\r\n    this.clear.addEventListener('click', this.onClickClear.bind(this));\r\n    this.btnDownload.addEventListener('click', this.onClickDownload.bind(this));\r\n  }\r\n\r\n  onClickDownload(e) {\r\n    this.btnDownload.href = this.canvas.toDataURL(\"image/jpg\",1);\r\n    this.btnDownload.download = \"image.jpeg\";\r\n  }\r\n\r\n  onClickClear() {\r\n    this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n    this.undoArray = [];\r\n    this.updateNavigator();\r\n    this.initCanvasBackground();\r\n  }\r\n\r\n  onClickUndo() {\r\n    if (this.undoArray.length === 0) {\r\n      alert('더이상 실행 취소 불가');\r\n      return;\r\n    };\r\n    let prevDataUrl = this.undoArray.pop();\r\n    let prevImg = new Image();\r\n    prevImg.onload = () => {\r\n      this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n      this.context.drawImage(prevImg, 0, 0, this.canvas.width, this.canvas.height, 0, 0, this.canvas.width, this.canvas.height);\r\n    }\r\n    prevImg.src = prevDataUrl;\r\n    if (this.isNavigatorVisible) {\r\n      this.navigatorIMG.src = prevDataUrl;\r\n    }\r\n  }\r\n\r\n  saveState() {\r\n    if(this.undoArray.length > 9) {\r\n      this.undoArray.shift();\r\n      this.undoArray.push(this.canvas.toDataURL());\r\n    } else {\r\n      this.undoArray.push(this.canvas.toDataURL());\r\n    }\r\n  }\r\n\r\n  updateNavigator() {\r\n    if(!this.isNavigatorVisible) return;\r\n    this.navigatorIMG.src = this.canvas.toDataURL();\r\n  }\r\n\r\n  onChangeColor(e) {\r\n    this.brushSizePreview.style.background = e.target.value;\r\n  }\r\n\r\n  onChangeBrushSize(e) {\r\n    this.brushSizeLabel.innerHTML = `${e.target.value} Size`;\r\n    this.brushSizePreview.style.width = `${e.target.value}px`;\r\n    this.brushSizePreview.style.height = `${e.target.value}px`;\r\n  }\r\n\r\n  onMouseOut() {\r\n    if (this.STATUS === this.MODE.none) return;\r\n    this.isMouseDown = false;\r\n  }\r\n\r\n  onMouseUp() {\r\n    if (this.STATUS === this.MODE.none) return;\r\n    this.isMouseDown = false;\r\n    this.updateNavigator();\r\n  }\r\n\r\n  onMouseMove(e) {\r\n    if (!this.isMouseDown) return;\r\n    const currentPosition = this.getMousePosition(e);\r\n    this.context.lineTo(currentPosition.x, currentPosition.y);\r\n    this.context.stroke();\r\n    this.updateNavigator();\r\n  }\r\n\r\n  onMouseDown(e) {\r\n    if (this.STATUS === this.MODE.none) return;\r\n    this.isMouseDown = true;\r\n    const currentPosition = this.getMousePosition(e);\r\n    this.context.beginPath();\r\n    this.context.moveTo(currentPosition.x, currentPosition.y);\r\n    this.context.lineCap = \"round\";\r\n    if (this.STATUS === this.MODE.brush) {\r\n      this.context.strokeStyle = this.colorPicker.value;\r\n      this.context.lineWidth = this.brushSize.value;\r\n    } else if (this.STATUS === this.MODE.eraser) {\r\n      this.context.strokeStyle = this.COLOR_VALUE.eraser;\r\n      this.context.lineWidth = 50;\r\n    }\r\n    this.saveState();\r\n  }\r\n\r\n  getMousePosition(e) {\r\n    const boundaries = this.canvas.getBoundingClientRect();\r\n    return {\r\n      x: e.clientX - boundaries.left,\r\n      y: e.clientY - boundaries.top,\r\n    };\r\n  }\r\n\r\n  onClickBrush(e) {\r\n    const isActive = e.currentTarget.classList.contains(this.CLASS_NAME.active);\r\n    this.STATUS = isActive ? this.MODE.none : this.MODE.brush;\r\n    this.canvas.style.cursor = isActive ? this.CURSOR_VALUE.default : this.CURSOR_VALUE.active;\r\n    e.currentTarget.classList.toggle(this.CLASS_NAME.active);\r\n    this.brushPanel.classList.toggle(this.CLASS_NAME.hide);\r\n    this.eraser.classList.remove(this.CLASS_NAME.active);\r\n  }\r\n\r\n  onClickeraser(e) {\r\n    const isActive = e.currentTarget.classList.contains(this.CLASS_NAME.active);\r\n    this.STATUS = isActive ? this.MODE.none : this.MODE.eraser;\r\n    this.canvas.style.cursor = isActive ? this.CURSOR_VALUE.default : this.CURSOR_VALUE.active;\r\n    e.currentTarget.classList.toggle(this.CLASS_NAME.active);\r\n    this.brush.classList.remove(this.CLASS_NAME.active);\r\n    this.brushPanel.classList.add(this.CLASS_NAME.hide);\r\n  }\r\n\r\n  onClickNavigator(e) {\r\n    this.isNavigatorVisible = !e.currentTarget.classList.contains(this.CLASS_NAME.active);\r\n    e.currentTarget.classList.toggle(this.CLASS_NAME.active);\r\n    this.navigatorContainer.classList.toggle(this.CLASS_NAME.hide);\r\n    this.updateNavigator();\r\n  }\r\n}\r\n\r\nnew DrawingBoard();\r\n"],"names":["isMouseDown","isNavigatorVisible","undoArray","CLASS_NAME","active","hide","CURSOR_VALUE","default","COLOR_VALUE","eraser","background","MODE","none","brush","STATUS","container","canvas","toolbar","brushPanel","brushSize","brushSizeLabel","brushSizePreview","colorPicker","navigator","navigatorContainer","navigatorIMG","undo","clear","btnDownload","constructor","assignElement","initContext","initCanvasBackground","addEvent","document","querySelector","context","getContext","fillStyle","fillRect","width","height","addEventListener","onClickBrush","bind","onMouseDown","onMouseMove","onMouseUp","onMouseOut","onChangeBrushSize","onChangeColor","onClickeraser","onClickNavigator","onClickUndo","onClickClear","onClickDownload","e","href","toDataURL","download","clearRect","updateNavigator","length","alert","prevDataUrl","pop","prevImg","Image","onload","drawImage","src","saveState","shift","push","style","target","value","innerHTML","currentPosition","getMousePosition","lineTo","x","y","stroke","beginPath","moveTo","lineCap","strokeStyle","lineWidth","boundaries","getBoundingClientRect","clientX","left","clientY","top","isActive","currentTarget","classList","contains","cursor","toggle","remove","add"],"version":3,"file":"index.dbb62f11.js.map"}